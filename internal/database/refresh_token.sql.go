// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_token.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO refresh_tokens (
    refreshToken,
    user_id,
    created_at,
    updated_at,
    expires_at,
    revoked_at
) VALUES (
    $1,
    $2,
    NOW(),
    NOW(),
    NOW() + INTERVAL '60 days',
    NULL
) RETURNING refreshtoken, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateRefreshTokenParams struct {
	Refreshtoken string
	UserID       uuid.UUID
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRefreshToken, arg.Refreshtoken, arg.UserID)
	return err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT user_id FROM refresh_tokens
WHERE refreshToken = $1
    AND expires_at > NOW()
    AND revoked_at IS NULL
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, refreshtoken string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, refreshtoken)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET
    updated_at = NOW(),
    revoked_at = NOW()
WHERE refreshToken = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, refreshtoken string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, refreshtoken)
	return err
}
