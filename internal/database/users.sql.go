// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const checkMembership = `-- name: CheckMembership :one
SELECT is_chirpy_red FROM users
WHERE id = $1
`

func (q *Queries) CheckMembership(ctx context.Context, id uuid.UUID) (sql.NullBool, error) {
	row := q.db.QueryRowContext(ctx, checkMembership, id)
	var is_chirpy_red sql.NullBool
	err := row.Scan(&is_chirpy_red)
	return is_chirpy_red, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password, is_chirpy_red)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    false
)
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red FROM users
WHERE email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const reset = `-- name: Reset :exec
DELETE FROM users
`

func (q *Queries) Reset(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, reset)
	return err
}

const setMemberShip = `-- name: SetMemberShip :exec
UPDATE users
SET
    is_chirpy_red = true,
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) SetMemberShip(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, setMemberShip, id)
	return err
}

const updateEmail = `-- name: UpdateEmail :exec
UPDATE users
SET
    email = $1,
    updated_at = NOW()
WHERE id = $2
`

type UpdateEmailParams struct {
	Email string
	ID    uuid.UUID
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateEmail, arg.Email, arg.ID)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET
    hashed_password = $1,
    updated_at = NOW()
WHERE id = $2
`

type UpdatePasswordParams struct {
	HashedPassword string
	ID             uuid.UUID
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.HashedPassword, arg.ID)
	return err
}
